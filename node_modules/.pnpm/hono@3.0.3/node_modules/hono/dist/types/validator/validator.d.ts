import type { Context } from '../context';
import type { Env, ValidationTargets, MiddlewareHandler } from '../types';
declare type ValidationTargetKeysWithBody = 'form' | 'json';
declare type ValidationTargetByMethod<M> = M extends 'get' | 'head' ? Exclude<keyof ValidationTargets, ValidationTargetKeysWithBody> : keyof ValidationTargets;
export declare const validator: <T, P extends string, M extends string, U extends ValidationTargetByMethod<M>, V extends { [K in U]: T; }, E extends Env = any>(target: U, validationFunc: (value: ValidationTargets[U], c: Context<E, any, {}>) => Response | Promise<Response> | T) => MiddlewareHandler<E, P, V>;
export {};
